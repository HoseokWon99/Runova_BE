version: "3.9"

services:
  # --- 개발용 API (핫리로드) ---
  api-dev:
    profiles: ["dev"]
    image: node:20-alpine
    working_dir: /app
    command: sh -lc "npm ci && npx prisma generate && npm run start:dev"
    env_file:
      - .env.development
    environment:
      # Docker 네트워크 서비스명 기준으로 연결
      DATABASE_URL: postgresql://runova:runova@db:5432/runova?schema=public
      REDIS_URL: redis://redis:6379
      TZ: Asia/Seoul
    ports:
      - "3000:3000"
    volumes:
      - .:/app
      - node_modules_cache:/app/node_modules
    depends_on:
      - db
      - redis

  # --- 프로덕션용 API (빌드된 이미지 사용) ---
  api:
    profiles: ["prod"]
    build:
      context: .
      dockerfile: Dockerfile
    env_file:
      - .env.production
    environment:
      DATABASE_URL: postgresql://runova:runova@db:5432/runova?schema=public
      REDIS_URL: redis://redis:6379
      TZ: Asia/Seoul
    ports:
      - "3000:3000"
    depends_on:
      - db
      - redis
    # DB 준비 타이밍 이슈가 있으면 아래 커맨드로 마이그레이션을 앞단에 수행
    command: >
      sh -lc "
        node -e 'process.exit(0)' &&
        npx prisma migrate deploy &&
        node dist/main.js
      "

  # --- PostgreSQL ---
  db:
    image: postgres:16-alpine
    environment:
      POSTGRES_DB: runova
      POSTGRES_USER: runova
      POSTGRES_PASSWORD: runova
      TZ: Asia/Seoul
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data

  # --- Redis ---
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"

volumes:
  pgdata:
  node_modules_cache:
