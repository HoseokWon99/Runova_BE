name: Deploy to EC2

on:
  push:
    branches: [main]

permissions:
  contents: read
  packages: write

env:
  IMAGE: ghcr.io/${{ github.repository_owner }}/runova

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR (using GITHUB_TOKEN)
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Build & Push image to GHCR (linux/amd64)
        run: |
          TAG=${{ github.sha }}
          docker buildx build \
            --platform linux/amd64 \
            -t $IMAGE:$TAG \
            -t $IMAGE:latest \
            --push .

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Add SSH key
        shell: bash
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > key.pem
          chmod 600 key.pem

      - name: Send env file
        shell: bash
        env:
          HOST: ${{ secrets.EC2_HOST }}
          PORT: ${{ secrets.EC2_PORT }}
          USER: ${{ secrets.EC2_USERNAME }}
          ENV_PRODUCTION: ${{ secrets.ENV_PRODUCTION }}
        run: |
          set -euo pipefail
          echo "$ENV_PRODUCTION" > .env.production
          ssh -i key.pem -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
              -p "$PORT" "$USER@$HOST" 'mkdir -p ~/runova'
          scp -i key.pem -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
              -P "$PORT" .env.production "$USER@$HOST:/home/$USER/runova/.env.production"

      - name: Pull & Restart (pull image from GHCR and run)
        shell: bash
        env:
          HOST: ${{ secrets.EC2_HOST }}
          PORT: ${{ secrets.EC2_PORT }}
          USER: ${{ secrets.EC2_USERNAME }}
          IMAGE: ghcr.io/${{ github.repository_owner }}/runova
          TAG: ${{ github.sha }}
          GHCR_USER:
          GHCR_PAT:
        run: |
          ssh -i key.pem \
              -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
              -o ServerAliveInterval=30 -o ServerAliveCountMax=120 \
              -p "$PORT" "$USER@$HOST" \
              IMAGE="$IMAGE" TAG="$TAG" GHCR_USER="${GHCR_USER:-}" GHCR_PAT="${GHCR_PAT:-}" bash -s <<'EOSSH'
            set -euo pipefail
            cd ~/runova

            # Private 패키지인 경우에만 GHCR 로그인
            if [ -n "${GHCR_PAT}" ] && [ -n "${GHCR_USER}" ]; then
              echo "${GHCR_PAT}" | docker login ghcr.io -u "${GHCR_USER}" --password-stdin
            fi

            echo "[+] Pull image"
            docker pull "${IMAGE}:${TAG}"

            echo "[+] Stop previous container"
            docker stop runova || true
            docker rm runova || true

            echo "[+] Run new container"
            docker run -d --name runova --restart=always \
              --env-file .env.production \
              -p 3000:3000 \
              "${IMAGE}:${TAG}"

            echo "[+] Deployed ${IMAGE}:${TAG}"
          EOSSH
