name: Deploy

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  TAG: latest

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=${{ env.TAG }}
            type=ref,event=branch
            type=sha

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache,mode=max

  deploy-to-ec2:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: SSH to EC2 and deploy
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: ${{ secrets.EC2_PORT }}
          script_stop: true
          script: |
            set -euo pipefail
            export REGISTRY=${{ env.REGISTRY }}
            export IMAGE_NAME=${{ env.IMAGE_NAME }}
            export TAG=${{ env.TAG }}
            cd ${{ secrets.REMOTE_DIR }}
            if [ ! -f .env.production ]; then
              echo "‚ùå .env.production is missing" && exit 1
            fi
            echo "üîê Login to registry"
            echo ${{ secrets.GITHUB_TOKEN }} | docker login $REGISTRY -u ${{ github.actor }} --password-stdin
            echo "üì• Pull images"
            if command -v docker compose >/dev/null 2>&1; then
              docker compose -f docker-compose.prod.yml pull
              docker compose -f docker-compose.prod.yml up -d --wait --remove-orphans
              docker compose -f docker-compose.prod.yml ps
            else
              docker-compose -f docker-compose.prod.yml pull
              docker-compose -f docker-compose.prod.yml up -d --remove-orphans
              docker-compose -f docker-compose.prod.yml ps
            fi
            echo "üè• Health"
            curl -f http://localhost:3000/health || (echo "‚ùå Health check failed" && exit 1)
name: Deploy to EC2

on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Check SSH port reachability
        run: |
          set -euxo pipefail
          HOST="${{ secrets.EC2_HOST }}"
          PORT="${{ secrets.EC2_PORT }}"
          timeout 3 bash -c "</dev/tcp/${HOST}/${PORT}" && echo "Port open" || (echo "Port closed"; exit 1)

      - name: Deploy to EC2 via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: ${{ secrets.EC2_PORT }}
          script: |
            set -euxo pipefail

            BRANCH="${{ github.ref_name }}"   
            REPO_DIR=/home/${{ secrets.EC2_USERNAME }}/server

            if [ ! -d "$REPO_DIR/.git" ]; then
              mkdir -p "$REPO_DIR"
              git clone https://github.com/${{ github.repository }}.git "$REPO_DIR"
            fi

            cd "$REPO_DIR"
            git fetch --all --prune
            git checkout "$BRANCH"
            git reset --hard "origin/$BRANCH"

            # ÌôòÍ≤ΩÌååÏùº ÏÉùÏÑ±
            cat > .env.production <<'EOF'
            ${{ secrets.ENV_PRODUCTION }}
            EOF

            # ÎèÑÏª§ Î≤†Ïù¥Ïä§ Ïù¥ÎØ∏ÏßÄ ÏµúÏã†Ìôî
            docker pull node:22-alpine || true
            docker pull redis:7-alpine || true

            # Îã§Ïö¥ Î∞è Ï†ïÎ¶¨
            docker compose down --remove-orphans

            # ÎπåÎìú 
            docker compose --env-file .env.production build --pull

            # Í∏∞Îèô
            docker compose --env-file .env.production up -d

            # ÏÉÅÌÉú ÌôïÏù∏
            docker compose ps
            docker ps

            # ÏµúÍ∑º Î°úÍ∑∏(Î∞±ÏóîÎìú ÏÑúÎπÑÏä§ Ïù¥Î¶ÑÏóê ÎßûÍ≤å Ï°∞Ï†ï)
            docker compose logs runova-backend --since=2m || true
