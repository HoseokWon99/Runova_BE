name: Deploy to EC2 (no registry)

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU (for multi-arch, optional)
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 레지스트리 푸시 대신, 런너에서 이미지 생성 → tar 파일로 저장
      - name: Build Docker image to local docker format
        run: |
          # 이미지 태그(브랜치별로 구분, 기본은 SHA)
          IMAGE_TAG=${{ github.sha }}
          # linux/amd64로 고정 (EC2 인스턴스 아키텍처에 맞춰 필요 시 변경)
          docker buildx build \
            --platform linux/amd64 \
            -t runova-backend:${IMAGE_TAG} \
            --output type=docker \
            .

      - name: Save image as tar
        run: |
          IMAGE_TAG=${{ github.sha }}
          docker save runova-backend:${IMAGE_TAG} -o runova-backend-${IMAGE_TAG}.tar
          ls -lh runova-backend-${IMAGE_TAG}.tar

      # 필요한 환경파일(.env.production 등)도 함께 전송 (이미 EC2에 있다면 생략 가능)
      - name: Upload files to EC2 (image tar + env)
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: ${{ secrets.EC2_PORT }}
          source: |
            runova-backend-${{ github.sha }}.tar
            .env.production
          target: ~/deploy/runova

      - name: Deploy on EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: ${{ secrets.EC2_PORT }}
          script: |
            set -euo pipefail
            cd ~/deploy/runova

            IMAGE_TAG=${{ github.sha }}
            IMAGE_NAME=runova-backend

            echo "[1/5] docker load"
            docker load -i ${IMAGE_NAME}-${IMAGE_TAG}.tar

            echo "[2/5] stop & remove old container (if exists)"
            docker stop ${IMAGE_NAME} || true
            docker rm ${IMAGE_NAME} || true

            echo "[3/5] run new container"
            # 필요 시 127.0.0.1:3000:3000 바인딩으로 외부 노출 차단 가능
            docker run -d \
              --name ${IMAGE_NAME} \
              --restart unless-stopped \
              -p 3000:3000 \
              --env-file .env.production \
              ${IMAGE_NAME}:${IMAGE_TAG}

            echo "[4/5] cleanup dangling images"
            docker image prune -f || true

            echo "[5/5] done"
